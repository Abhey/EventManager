/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Abhey Rana
 */

import java.sql.*;
import javax.swing.JOptionPane;
import java.net.*;
import java.io.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
public class Server extends javax.swing.JFrame {
    public static Connection conn;
    public static  String User;
    public static  String Password;
    public static  String DatabaseURL;
    public static ServerSocket server;
    public static int reqCount=0;
    public static BigServer Gary;
    public static int x=0;
    public static String V;
    public static int a=0;
    public static int b=0;
    public static int c=0;
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
        try{
            DatabaseURL="jdbc:mysql://localhost/event?user="+User+"&password="+Password;
            Class.forName("java.sql.Driver");
            conn=(Connection) DriverManager.getConnection(DatabaseURL,User,Password);
        }
        catch(com.mysql.jdbc.exceptions.jdbc4.CommunicationsException e){
            JOptionPane.showMessageDialog(null,"Please start MySQL server first");
            System.exit(0);
        }
        catch(java.sql.SQLException e){
            JOptionPane.showMessageDialog(null,"Access Denied wrong username or password try again");
            BigServer.access=0;
            System.exit(0);
        }
        catch(Exception e){
            System.out.println("Error Occurred:"+e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        LabelEventName1 = new javax.swing.JLabel();
        Branch = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        RB2 = new javax.swing.JRadioButton();
        RB1 = new javax.swing.JRadioButton();
        jButton5 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        work = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        jDialog1.setLocation(new java.awt.Point(540, 360));
        jDialog1.setSize(new java.awt.Dimension(380, 140));

        LabelEventName1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        LabelEventName1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelEventName1.setText("Venue Open To ");

        Branch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Biotechnology Engineering", "Computer Science And Engineering", "Chemical Engineering", "Civil Engineering", "Electronics And Communication Engineering", "Electrical Engineering", "Information Technology Engineering", "Mechanical Engineering", "Production And Industrial Engineering" }));

        jButton4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton4.setText("Ok");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(LabelEventName1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(Branch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelEventName1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Branch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addContainerGap())
        );

        jDialog2.setLocation(new java.awt.Point(540, 360));
        jDialog2.setSize(new java.awt.Dimension(520, 170));

        buttonGroup1.add(RB2);
        RB2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        RB2.setText("Automatic event cleaner (All the events which have passed will be cleared)");

        buttonGroup1.add(RB1);
        RB1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        RB1.setText("Manually delete event (By providing eventId of that event )");

        jButton5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton5.setText("Ok");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog2Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RB1)
                    .addComponent(RB2))
                .addGap(36, 36, 36))
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(RB1)
                .addGap(18, 18, 18)
                .addComponent(RB2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server Side");
        setLocation(new java.awt.Point(400, 100));
        setResizable(false);
        setSize(new java.awt.Dimension(620, 490));

        jButton3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton3.setText("Start Server");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Rockwell Extra Bold", 0, 24)); // NOI18N
        jLabel2.setText("Event Manager Administrative Portal");

        work.setEditable(false);
        work.setColumns(20);
        work.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        work.setRows(5);
        jScrollPane1.setViewportView(work);

        jButton7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton7.setText("Get List of  Registred Coordinators");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton8.setText("Get List of  Registred Events");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton9.setText("Add New Venues");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton10.setText("Get List of all venues");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton11.setText("Refresh");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton11)
                .addGap(99, 99, 99))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jButton7)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jButton3)
                        .addGap(46, 46, 46)
                        .addComponent(jButton7)
                        .addGap(41, 41, 41)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10)
                        .addGap(40, 40, 40)
                        .addComponent(jButton9)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton11)
                        .addGap(15, 15, 15))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //I have to keep this part on a separate thread
        if(BigServer.z==0)
            new BigServer("OtherWork");
        if(x==0){
            Gary=new BigServer("MainServer");
            x=1;
            jButton3.setText("Stop Server");
            JOptionPane.showMessageDialog(null,"Server Started");
        }
        else if(x==1){
            try {
                Gary.Interrupt();
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
            x=0;
            jButton3.setText("Start Server");
            JOptionPane.showMessageDialog(null,"Server Stopped");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if(b==0){
            c=0;
            jButton8.setText("Get List of Registered Events");
            a=0;
            jButton10.setText("Get List of all venues");
            try{
                String str="select *from coordinator";
                Statement stmt=conn.createStatement();
                ResultSet rs=stmt.executeQuery(str);
                work.setText("List of Coordinators");
                while(rs.next()){
                    str="\n\nName: "+rs.getString("Name")+"\nRegistration: "+rs.getString("Registration")+"\nVerified: "+rs.getString("Verified");
                    work.append(str);
                }
                b=1;
                jButton7.setText("     Change coordinator previleges  ");
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
        else if(b==1){
            try{
                int Registration=Integer.parseInt(JOptionPane.showInputDialog("Enter the registration number of coordinator whose previleges you want to change"));
                String str="select * from coordinator where Registration="+Registration+";";
                Statement stmt=conn.createStatement();
                ResultSet rs=stmt.executeQuery(str);
                if(rs.next()){
                    String Ver=rs.getString("Verified");
                    if(Ver.compareTo("Yes")==0){
                        str="update coordinator set Verified='No' where Registration="+Registration+";";
                        stmt.executeUpdate(str);
                        str="select * from coordinator";
                        ResultSet Rs=stmt.executeQuery(str);
                        work.setText("List Of Coordinators");
                        while(Rs.next()){
                            str="\n\nName: "+Rs.getString("Name")+"\nRegistration: "+Rs.getString("Registration")+"\nVerified: "+Rs.getString("Verified");
                            work.append(str);
                        }
                    }
                    else if(Ver.compareTo("No")==0){
                        str="update coordinator set Verified='Yes' where Registration="+Registration+";";
                        stmt.executeUpdate(str);
                        str="select * from coordinator";
                        work.setText("List Of Coordinators");
                        ResultSet Rs=stmt.executeQuery(str);
                        while(Rs.next()){
                            str="\n\nName: "+Rs.getString("Name")+"\nRegistration: "+Rs.getString("Registration")+"\nVerified: "+Rs.getString("Verified");
                            work.append(str);
                        }
                    }
                    JOptionPane.showMessageDialog(null,"Previleges of coordinator changed successfully");
                }
                else{
                    JOptionPane.showMessageDialog(null,"There is no coordinator with this registration number please enter a valid registration number");
                }
            }
            catch(java.lang.NumberFormatException e){
                JOptionPane.showMessageDialog(null,"Entered registration number is not valid please enter a valid registration number");
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        if(c==0){
            c=1;
            b=0;
            jButton7.setText("Get List of Registered Coordinators");
            a=0;
            jButton10.setText("Get List of all venues");
            try{
                Statement stmt=conn.createStatement();
                String str="select *from event ORDER BY(Date And Time)";
                ResultSet rs=stmt.executeQuery(str);
                work.setText("Registred Events");
                while(rs.next()){
                    str="\n\nEvent Id: "+rs.getString("EventId")+"Event Name: "+rs.getString("Name")+"\nEvent Type:"+rs.getString("Type")+"\nVenue: "+rs.getString("Venue")+"\nEvent Date: "+rs.getString("Date");
                    work.append(str);
                }
                jButton8.setText("    Delete Created Event   ");
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
        else if(c==1){
            jDialog2.setVisible(true);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
         V=JOptionPane.showInputDialog("Enter the name of venue which you want to enter");
         if(V!=null){
             jDialog1.setVisible(true);
         }
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        if(a==0){
            c=0;
            jButton8.setText("Get List of Registered Events");
            b=0;
            jButton7.setText("Get List of Registered Coordinators");
            try{
                String str="select *from venue;";
                Statement stmt=conn.createStatement();
                ResultSet rs=stmt.executeQuery(str);
                work.setText("List of Venues");
                while(rs.next()){
                    str="\n\nVenue: "+rs.getString("Venue")+"\nOpen To: "+rs.getString("OpenTo");
                    work.append(str);
                }
                jButton10.setText("Delete Venue");
                a=1;
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
        else if(a==1){
            String Venue=JOptionPane.showInputDialog("Enter the name of venue which you want to delete");
            try{
                String str="select *from venue where Venue='"+Venue+"';";
                Statement stmt=conn.createStatement();
                ResultSet rs=stmt.executeQuery(str);
                if(rs.next()){
                    str="delete from venue where Venue='"+Venue+"';";
                    stmt.executeUpdate(str);
                    str="select *from venue";
                    ResultSet Rs=stmt.executeQuery(str);
                    work.setText("List of Venues");
                    while(Rs.next()){
                    str="\n\nVenue: "+Rs.getString("Venue")+"\nOpen To: "+Rs.getString("OpenTo");
                    work.append(str);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null,"No such venue exists");
                }
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String branch=(String)Branch.getSelectedItem();
        String str="insert into venue values('"+V+"','"+branch+"');";
        try {
            Statement stmt=conn.createStatement();
            stmt.executeUpdate(str);
            JOptionPane.showMessageDialog(null,"Venue entered successfully");
            if(a==1){
                str="select *from venue;";
                ResultSet Rs=stmt.executeQuery(str);
                work.append("List of Venues");
                while(Rs.next()){
                    str="\n\nVenue: "+Rs.getString("Venue")+"\nOpen To: "+Rs.getString("OpenTo");
                    work.append(str);
                }
            }
            jDialog1.dispose();
        }
        catch(com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException e){
            JOptionPane.showMessageDialog(null,"Entered venue is already present");
        }
        catch (SQLException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch(Exception e){
            System.out.println("Error Occurred:"+e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        String str;
        if(a==1){
            try{
                Statement stmt=conn.createStatement();
                str="select *from venue;";
                ResultSet Rs=stmt.executeQuery(str);
                work.append("List of Venues");
                while(Rs.next()){
                    str="\n\nVenue: "+Rs.getString("Venue")+"\nOpen To: "+Rs.getString("OpenTo");
                    work.append(str);
                }
            }
            catch(Exception e){
                System.out.println("Error Occured:"+e);
            }
        }
        else if(b==1){
            try{
                Statement stmt=conn.createStatement();
                str="select * from coordinator";
                        work.setText("List Of Coordinators");
                        ResultSet Rs=stmt.executeQuery(str);
                        while(Rs.next()){
                            str="\n\nName: "+Rs.getString("Name")+"\nRegistration: "+Rs.getString("Registration")+"\nVerified: "+Rs.getString("Verified");
                            work.append(str);
                        }
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
        else if(c==1){
            try{
                Statement stmt=conn.createStatement();
                str="select *from event ORDER BY(Date And Time)";
                ResultSet rs=stmt.executeQuery(str);
                work.setText("Registred Events");
                while(rs.next()){
                    str="\n\nEvent Id: "+rs.getString("EventId")+"\nEvent Name: "+rs.getString("Name")+"\nEvent Type:"+rs.getString("Type")+"\nVenue: "+rs.getString("Venue")+"\nEvent Date: "+rs.getString("Date");
                    work.append(str);
                }
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if(RB2.isSelected()==true){
            GregorianCalendar now=new GregorianCalendar();
            String date="'"+now.get(Calendar.YEAR)+"-"+(now.get(Calendar.MONTH)+1)+"-"+now.get(Calendar.DAY_OF_MONTH)+"'";
            String time="'"+now.get(Calendar.HOUR_OF_DAY)+":"+now.get(Calendar.MINUTE)+":"+now.get(Calendar.SECOND)+"'";
            String str="select *from event where (Date="+date+" and Time<"+time+" ) or Date<"+date+";";
            try{
                Statement stmt=conn.createStatement();
                ResultSet rs=stmt.executeQuery(str);
                while(rs.next()){
                    String EventId=rs.getString("EventId");
                    str="delete from event where EventId="+EventId+";";
                    stmt.executeUpdate(str);
                    str="drop table Event"+EventId+";";
                    stmt.executeUpdate(str);
                    str="select *from event where (Date="+date+" and Time<"+time+" ) or Date<"+date+";";
                    rs=stmt.executeQuery(str);
                }
                str="select *from event Order by (Date And Time);";
                ResultSet Rs =stmt.executeQuery(str);
                work.setText("Registered Events");
                while(Rs.next()){
                    str="\n\nEvent Id: "+Rs.getString("EventId")+"\nEvent Name: "+Rs.getString("Name")+"\nEvent Type:"+Rs.getString("Type")+"\nVenue: "+Rs.getString("Venue")+"\nEvent Date: "+Rs.getString("Date");
                    work.append(str);
                }
                JOptionPane.showMessageDialog(null,"Automatic cleanup successfull");
                jDialog2.dispose();
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
        if(RB1.isSelected()==true){
            try{
                int EventId=Integer.parseInt(JOptionPane.showInputDialog("Enter the eventId of event which you want to delete"));
                String str="select * from event where EventId="+EventId+";";
                Statement stmt=conn.createStatement();
                ResultSet rs=stmt.executeQuery(str);
                if(rs.next()){
                    str="delete from event where EventId="+EventId+";";
                    stmt.executeUpdate(str);
                    str="drop table Event"+EventId+";";
                    stmt.executeUpdate(str);
                    JOptionPane.showMessageDialog(null,"Event successfully deleted");
                    str="select *from event Order by (Date And Time);";
                    ResultSet Rs =stmt.executeQuery(str);
                    work.setText("Registered Events");
                    while(Rs.next()){
                    str="\n\nEvent Id: "+Rs.getString("EventId")+"\nEvent Name: "+Rs.getString("Name")+"\nEvent Type:"+Rs.getString("Type")+"\nVenue: "+Rs.getString("Venue")+"\nEvent Date: "+Rs.getString("Date");
                    work.append(str);
                    }
                    jDialog2.dispose();
                }
                else{
                    JOptionPane.showMessageDialog(null,"There is no event corresponding to this eventId please enter a valid eventId");
                    jDialog2.dispose();
                }
            }
            catch(java.lang.NumberFormatException e){
                JOptionPane.showMessageDialog(null,"Entered eventId is not valid please enter a valid eventId");
                jDialog2.dispose();
            }
            catch(Exception e){
                System.out.println("Error Occurred:"+e);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Branch;
    private javax.swing.JLabel LabelEventName1;
    private javax.swing.JRadioButton RB1;
    private javax.swing.JRadioButton RB2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea work;
    // End of variables declaration//GEN-END:variables
}
class Work implements Runnable{
   public Socket sock;
   public int number;
    public Work(Socket s,int n){
        sock=s;
        number=n;
    }
    private String getSlotFromTime(String str){
        String Str;
        if(str.compareTo("10:00:00")==0)
            Str="Morning Slot (8:00-10:00)";
        else if(str.compareTo("12:00:00")==0)
            Str="Slot 2 (10:00-12:00)";
        else if(str.compareTo("16:00:00")==0)
            Str="Slot 3 (14:00-16:00)";
        else if(str.compareTo("18:00:00")==0)
            Str="Slot 4 (16:00-18:00)";
        else if(str.compareTo("20:00:00")==0)
            Str="Evening Slot (18:00-20:00)";
        else
            Str="";
        return Str;
    }
    @Override public void run(){
     //Working code for updating students and client records
    BufferedReader recieve=null;
    PrintWriter send=null;
    String S=null;
       try{
           recieve=new BufferedReader(new InputStreamReader(sock.getInputStream()));
           send=new PrintWriter(sock.getOutputStream());
           Statement stmt=Server.conn.createStatement();
           String str=recieve.readLine();
           if(str.compareTo("Update")==0){
               S=recieve.readLine();
               if(S.compareTo("Registration")==0){
                   str=recieve.readLine();
                   int x=stmt.executeUpdate(str);
                   send.println("Success");
                   send.flush();
               }
               if(S.compareTo("Event")==0){
                  String Str=recieve.readLine();
                   ResultSet rs=stmt.executeQuery(Str);
                   if(!rs.next()){
                       send.println("Success");
                       send.flush();
                       str=recieve.readLine();
                       int x=stmt.executeUpdate(str);
                       send.println("Success");
                       send.flush();
                       ResultSet Rs=stmt.executeQuery("select *from eventId;");
                       Rs.next();
                       int EventId=Integer.parseInt(Rs.getString("EventId"))+1;
                       Rs=stmt.executeQuery(Str);
                       Rs.next();
                       stmt.executeUpdate("update event set EventId="+EventId+" where Registration="+Rs.getString("Registration")+" and Date='"+Rs.getString("Date")+"';");
                       stmt.executeUpdate("update eventId set EventId="+EventId+";");
                       String TableName="Event"+EventId;
                       str="create table "+TableName+" (Name Varchar(50),Registration Integer,Primary Key(Registration));";
                       stmt.executeUpdate(str);
                       send.println(EventId);
                       send.flush();
                   }
                   else{
                       send.println("Failure");
                       send.flush();
                   }
               }
               if(S.compareTo("Register")==0){
                   str=recieve.readLine();
                   ResultSet rs=stmt.executeQuery("select *from event where EventId="+str+";");
                   if(rs.next()){
                       send.println("Exists");
                       send.flush();
                       String OpenFor=rs.getString("Access");
                       String Open=rs.getString("Regs");
                       String EventId="Event"+rs.getString("EventId");
                       str=recieve.readLine();
                       ResultSet RS=stmt.executeQuery("select *from student where Registration="+str+";");
                       RS.next();
                       if(OpenFor.compareTo("All Branches")==0||OpenFor.compareTo(RS.getString("Branch"))==0){
                           send.println("Valid");
                           send.flush();
                           if(Open.compareTo("Open")==0){
                               send.println("Open");
                               send.flush();
                               stmt.executeUpdate("insert into "+EventId+" values('"+RS.getString("Name")+"',"+RS.getString("Registration")+");");
                               send.println("Success");
                               send.flush();
                           }
                           else{
                               send.println("Close");
                               send.flush();
                           }
                       }
                       else{
                           send.println("Not Valid");
                           send.flush();
                           send.println(OpenFor);
                           send.flush();
                       }
                   }
                   else{
                       send.println("Not Exists");
                       send.flush();
                   }
               }
               if(S.compareTo("OpenRegistration")==0){
                   str=recieve.readLine();
                   ResultSet rs=stmt.executeQuery("select *from event where EventId="+str+" and Regs='Open';");
                   if(rs.next()){
                       send.println("Open");
                       send.flush();
                       stmt.executeUpdate("update event set Regs='Close' where EventId="+str+";");
                       send.println("Success");
                       send.flush();
                   }
                   else{
                       send.println("Close");
                       send.flush();
                   }
               }
               if(S.compareTo("CloseRegistration")==0){
                   str=recieve.readLine();
                   ResultSet rs=stmt.executeQuery("select *from event where EventId="+str+" and Regs='Close';");
                   if(rs.next()){
                       send.println("Close");
                       send.flush();
                       stmt.executeUpdate("update event set Regs='Open' where EventId="+str+";");
                       send.println("Success");
                       send.flush();
                   }
                   else{
                       send.println("Open");
                       send.flush();
                   }
               }
               if(S.compareTo("Delete")==0){
                   str=recieve.readLine();
                   stmt.executeUpdate("delete from event where EventId="+str+";");
                   stmt.executeUpdate("drop table Event"+str+";");
                   send.println("Success");
                   send.flush();
                   String Registration=recieve.readLine();
                   GregorianCalendar now=new GregorianCalendar();
                   String date="'"+now.get(Calendar.YEAR)+"-"+(now.get(Calendar.MONTH)+1)+"-"+now.get(Calendar.DAY_OF_MONTH)+"'";
                   String time="'"+now.get(Calendar.HOUR_OF_DAY)+":"+now.get(Calendar.MINUTE)+":"+now.get(Calendar.SECOND)+"'";
                   str="select * from event where Registration="+Registration+" AND ((Date="+date+"AND Time>="+time+") OR (Date >"+date+")) order by(Date And Time);";
                   ResultSet rs=stmt.executeQuery(str);
                   String EventName,EventType,Venue,EventSlot,EventId,OpenFor;
                               while(rs.next()){
                                   send.println("Start");
                                   send.flush();
                                   EventId=rs.getString("EventId");
                                   EventName=rs.getString("Name");
                                   EventType=rs.getString("Type");
                                   Venue=rs.getString("Venue");
                                   EventSlot=rs.getString("Time");
                                   OpenFor=rs.getString("Access");
                                   send.println(EventId);
                                   send.flush();
                                   send.println(EventName);
                                   send.flush();
                                   send.println(EventType);
                                   send.flush();
                                   send.println(Venue);
                                   send.flush();
                                   send.println(EventSlot);
                                   send.flush();
                                   send.println(OpenFor);
                                   send.flush();
                               }
                               send.println("Over");
                               send.flush(); 
               }
               if(S.compareTo("Debar")==0){
                   String EventId="Event"+recieve.readLine();
                   String Registration=recieve.readLine();
                   str="select * from "+EventId+" where Registration="+Registration+";";
                   ResultSet rs=stmt.executeQuery(str);
                   if(rs.next()){
                       send.println("Exists");
                       send.flush();
                       str="delete from "+EventId+" where Registration="+Registration+";";
                       stmt.executeUpdate(str);
                       send.println("Success");
                       send.flush();
                       str="select *from "+EventId+";";
                       ResultSet Rs=stmt.executeQuery(str);
                       while(Rs.next()){
                           send.println("Start");
                           send.flush();
                           send.println(Rs.getString("Name"));
                           send.println(Rs.getString("Registration"));
                       }
                       send.println("Over");
                       send.flush();
                   }
                   else{
                       send.println("Not Exists");
                       send.flush();
                   }
               }
               if(S.compareTo("Venue")==0){
                   String EventId=recieve.readLine();
                   str="select *from event where EventId="+EventId+";";
                   ResultSet rs=stmt.executeQuery(str);
                   rs.next();
                   String Time=rs.getString("Time");
                   String Date=rs.getString("Date");
                   String Venue=recieve.readLine();
                   str="select *from event where Venue='"+Venue+"' and Date='"+Date+"' and Time='"+Time+"';";
                   ResultSet Rs=stmt.executeQuery(str);
                   if(Rs.next()){
                       send.println("Booked");
                       send.flush();
                   }
                   else{
                       send.println("NotBooked");
                       send.flush();
                       str="update event set Venue='"+Venue+"' where EventId="+EventId+";";
                       stmt.executeUpdate(str);
                       send.println("Success");
                       send.flush();
                       String Registration=recieve.readLine();
                       GregorianCalendar now=new GregorianCalendar();
                       String date="'"+now.get(Calendar.YEAR)+"-"+(now.get(Calendar.MONTH)+1)+"-"+now.get(Calendar.DAY_OF_MONTH)+"'";
                       String time="'"+now.get(Calendar.HOUR_OF_DAY)+":"+now.get(Calendar.MINUTE)+":"+now.get(Calendar.SECOND)+"'";
                       str="select * from event where Registration="+Registration+" AND ((Date="+date+"AND Time>="+time+") OR (Date >"+date+")) order by(Date And Time);";
                       ResultSet RS=stmt.executeQuery(str);
                       String EventName,EventType,EVenue,EventSlot,EEventId,OpenFor;
                               while(RS.next()){
                                   send.println("Start");
                                   send.flush();
                                   EEventId=RS.getString("EventId");
                                   EventName=RS.getString("Name");
                                   EventType=RS.getString("Type");
                                   EVenue=RS.getString("Venue");
                                   EventSlot=RS.getString("Time");
                                   OpenFor=RS.getString("Access");
                                   send.println(EEventId);
                                   send.flush();
                                   send.println(EventName);
                                   send.flush();
                                   send.println(EventType);
                                   send.flush();
                                   send.println(EVenue);
                                   send.flush();
                                   send.println(EventSlot);
                                   send.flush();
                                   send.println(OpenFor);
                                   send.flush();
                               }
                               send.println("Over");
                               send.flush(); 
                   }
               }
           }
           if(str.compareTo("Execute")==0){
               str=recieve.readLine();
               if(str.compareTo("Login")==0){
                   String password;
                   password=recieve.readLine();
                   str=recieve.readLine();
                   ResultSet rs=stmt.executeQuery(str);
                if(rs.next()){
                   if(password.compareTo(rs.getString("Password"))==0){
                       send.println("Success");
                       send.flush();
                       send.println(rs.getString("Registration"));
                       send.flush();
                       S=recieve.readLine();
                       if(S.compareTo("Student")==0){
                           for(int i=0;i<7;i++){
                               str=recieve.readLine();
                               String EventName,EventType,Venue,EventSlot,EventId,OpenFor;
                               ResultSet RS=stmt.executeQuery(str);
                               while(RS.next()){
                                   send.println("Start");
                                   send.flush();
                                   EventId=RS.getString("EventId");
                                   EventName=RS.getString("Name");
                                   EventType=RS.getString("Type");
                                   Venue=RS.getString("Venue");
                                   EventSlot=RS.getString("Time");
                                   OpenFor=RS.getString("Access");
                                   send.println(EventId);
                                   send.flush();
                                   send.println(EventName);
                                   send.flush();
                                   send.println(EventType);
                                   send.flush();
                                   send.println(Venue);
                                   send.flush();
                                   send.println(EventSlot);
                                   send.flush();
                                   send.println(OpenFor);
                                   send.flush();
                               }
                               send.println("Over");
                               send.flush();
                           }
                       }
                       if(S.compareTo("Coordinator")==0){
                           GregorianCalendar now=new GregorianCalendar();
                           String date="'"+now.get(Calendar.YEAR)+"-"+(now.get(Calendar.MONTH)+1)+"-"+now.get(Calendar.DAY_OF_MONTH)+"'";
                           String time="'"+now.get(Calendar.HOUR_OF_DAY)+":"+now.get(Calendar.MINUTE)+":"+now.get(Calendar.SECOND)+"'";
                           str="select * from event where Registration="+rs.getString("Registration")+" AND ((Date="+date+"AND Time>="+time+") OR (Date >"+date+")) order by(Date And Time);";
                           String Str="select * from venue where OpenTo='All' or OpenTo='"+rs.getString("Branch")+"';";
                           ResultSet RS=stmt.executeQuery(str);
                           String EventName,EventType,Venue,EventSlot,EventDate,EventId;
                           while(RS.next()){
                               send.println("Start");
                               send.flush();
                               EventId=RS.getString("EventId");
                               EventName=RS.getString("Name");
                               EventType=RS.getString("Type");
                               Venue=RS.getString("Venue");
                               EventDate=RS.getString("Date");
                               EventSlot=RS.getString("Time");
                               send.println(EventId);
                               send.flush();
                               send.println(EventName);
                               send.flush();
                               send.println(EventType);
                               send.flush();
                               send.println(Venue);
                               send.flush();
                               send.println(EventDate);
                               send.flush();
                               send.println(EventSlot);
                               send.flush();
                           }
                           send.println("Over");
                           send.flush();
                           RS=stmt.executeQuery(Str);
                           while(RS.next()){
                               send.println("Start");
                               send.flush();
                               Venue=RS.getString("Venue");
                               send.println(Venue);
                               send.flush();
                           }
                           send.println("Over");
                           send.flush();
                       }
                   }
                   else{
                       send.println("Wrong password try again");
                       send.flush();
                   }
                }
                else{
                    send.println("Either you are not a verified user or you have not registered");
                    send.flush();
                }
               }
               if(str.compareTo("ForgotPassword")==0){
                   str=recieve.readLine();
                   ResultSet rs=stmt.executeQuery(str);
                   if(rs.next()){
                       send.println("UserExists");
                       send.flush();
                       String SecurityQuestion=rs.getString("SecurityQuestion");
                       String SecurityAnswer=rs.getString("SecurityAnswer");
                       send.println(SecurityQuestion);
                       send.flush();
                       str=recieve.readLine();
                       if(str.compareTo(SecurityAnswer)==0){
                           send.println("Granted");
                           send.flush();
                           String password=recieve.readLine();
                           str=recieve.readLine();
                           str="update "+str+" set Password='"+password+"'where Registration="+rs.getString("Registration")+";";
                           int x=stmt.executeUpdate(str);
                           send.println("Updated");
                           send.flush();
                       }
                       else{
                           send.println("NotGranted");
                           send.flush();
                       }
                   }
                   else{
                       send.println("UserNotExists");
                       send.flush();
                   }
               }
               if(str.compareTo("EventDetail")==0){
                   str=recieve.readLine();
                   ResultSet rs=stmt.executeQuery(str);
                   if(rs.next()){
                       send.println("Exists");
                       send.flush();
                       String D=rs.getString("Details").replace('?','\n');
                       D=D+"\n";
                       String Detail="";
                       int length=D.length();
                       int index=0;
                       for(int i=0;i<length;i++){
                           if(D.charAt(i)=='\n'){
                               Detail=Detail+D.substring(index,i)+"<BR>";
                               index=i+1;
                           }
                       }
                       str="<HTML>Event Name: "+rs.getString("Name")+"<BR>Event Type: "+rs.getString("Type")+"<BR>Date: "+rs.getString("Date")+"<BR>Venue: "+rs.getString("Venue")+"<BR>Event Slot: "+getSlotFromTime(rs.getString("Time"))+"<BR>Open For: "+rs.getString("Access")+"<BR>Details: "+Detail+"</HTML>";
                       send.println(str);
                       send.flush();
                   }
                   else{
                       send.println("NotExists");
                       send.flush();
                   }
               }
               if(str.compareTo("EventManager")==0){
                   String EventId=recieve.readLine();
                   String Registration=recieve.readLine();
                   str="select * from event where Registration="+Registration+" and EventId="+EventId+";";
                   ResultSet rs=stmt.executeQuery(str);
                   EventId="Event"+EventId;
                   if(rs.next()){
                       send.println("Exists");
                       send.flush();
                       send.println(rs.getString("Name"));
                       send.flush();
                       String Open=rs.getString("Regs");
                       send.println(Open);
                       send.flush();
                       ResultSet RS=stmt.executeQuery("select *from "+EventId+";");
                       String Name;
                       while(RS.next()){
                           send.println("Start");
                           send.flush();
                           Name=RS.getString("Name");
                           Registration=RS.getString("Registration");
                           str="Name: "+Name;
                           send.println(str);
                           send.flush();
                           str="Registration: "+Registration;
                           send.println(str);
                           send.flush();
                       }
                       send.println("Over");
                       send.flush();
                   }
                   else{
                       send.println("Not Exists");
                       send.flush();
                   }
               }
           }
       }
       catch(com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException e){
           if(S.compareTo("Registration")==0){
            send.println("Student with this registration number is already registerd");
            send.flush();
           }
           else if(S.compareTo("Event")==0){
               send.println("A coordinator cannot book mook more than one event on same day");
               send.flush();
           }
          else if(S.compareTo("Register")==0){
               send.println("You have already registered for this event");
               send.flush();
           }
           else{
               System.out.println("Error Occurred:"+e);
           }
       }
       catch(Exception e){
           System.out.println("Error Occurred:"+e);
       }
    }
}